<?php

namespace Slimdic\Test\Controller;

require_once 'Stub/StubController.php';

use Slimdic\Controller\Factory;
use Slim\Slim;
use chippyash\Type\String\StringType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-09 at 20:33:51.
 */
class FactoryTest extends \PHPUnit_Framework_TestCase
{

    public function testControllerFactoryIsAbstract()
    {
        $refl = new \ReflectionClass('\Slimdic\Controller\Factory');
        $this->assertTrue($refl->isAbstract());
    }

    /**
     * @expectedException Exception
     * @expectedExceptionMessage Class Foo does not exist
     */
    public function testCreateThrowsExceptionIfClassDoesNotExist()
    {
        $app = new Slim();
        $ctrlName = new StringType('Foo');
        $ctrl = Factory::create($app, $ctrlName);
    }
    
    /**
     * @expectedException Exception
     * @expectedExceptionMessage stdClass is not an instance of AbstractController 
     */
    public function testCreatethrowsExceptionIfClassIsNotAController()
    {
        $app = new Slim();
        $ctrlName = new StringType('\stdClass');
        $ctrl = Factory::create($app, $ctrlName);
    }
    
    public function testCreateReturnsAControllerIfProperlyParameterised()
    {
        //we need to mock out the http $_SERVER for slim->request() to work
        global $_SERVER;
        $_SERVER = [
            'REQUEST_METHOD' => 'GET',
            'REMOTE_ADDR' => '127.0.0.1',
            'SCRIPT_NAME' => '/foo/index.php',
            'REQUEST_URI' => 'foo?a=b',
            'SERVER_NAME' => 'foo',
            'SERVER_PORT' => 80
        ];
        $app = new Slim();
        $ctrlName = new StringType('\Slimdic\Test\Controller\Stub\StubController');
        $ctrl = Factory::create($app, $ctrlName);
        $this->assertInstanceOf('\Slimdic\Controller\AbstractController', $ctrl);
    }

}
